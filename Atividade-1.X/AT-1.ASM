;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*              MODIFICAÇÕES PARA USO COM 12F675                   *
;*                FEITAS PELO PROF. MARDSON                        *
;*                      MARÇO DE 2021                              *
;*                 BASEADO NO EXEMPLO DO LIVRO                     *
;*           Desbravando o PIC. David José de Souza                *
;*-----------------------------------------------------------------*
;*   MODELO PARA O PIC 12F675                                      *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     ARQUIVOS DE DEFINIÇÕES                      *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#INCLUDE <p12f675.inc>	;ARQUIVO PADRÃO MICROCHIP PARA 12F675

	__CONFIG _BODEN_OFF & _CP_OFF & _PWRTE_ON & _WDT_OFF & _MCLRE_ON & _INTRC_OSC_NOCLKOUT

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    PAGINAÇÃO DE MEMÓRIA                         *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;DEFINIÇÃO DE COMANDOS DE USUÁRIO PARA ALTERAÇÃO DA PÁGINA DE MEMÓRIA
#DEFINE	BANK0	BCF STATUS,RP0	;SETA BANK 0 DE MEMÓRIA
#DEFINE	BANK1	BSF STATUS,RP0	;SETA BANK 1 DE MAMÓRIA

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         VARIÁVEIS                               *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DOS NOMES E ENDEREÇOS DE TODAS AS VARIÁVEIS UTILIZADAS 
; PELO SISTEMA

	CBLOCK	0x20	;ENDEREÇO INICIAL DA MEMÓRIA DE
					;USUÁRIO
		W_TEMP		;REGISTRADORES TEMPORÁRIOS PARA USO
		STATUS_TEMP	;JUNTO ÀS INTERRUPÇÕES
		DD 
		MM  
		AA 
		SETE 
		RES_W
		SOMA
		C_MES 
		AUX_MES 
		RES_M 
		M 
		M1
		R 
		RES_M1 
		RES_M1_1 
		AUX 
		AUX_ANO 
		AUX_ANO_2 
		AUX_1 
		SOMA_MES 
		ANO 
		P_INTEIRA 
		C_ANO 
		P_RESTO 
		AUX_DIV 
		RES_M_ANO 
		V_SETE 
		ANO_BISSEXTO
		W_FINAL 
		INICIO_ANO 
		AUX_DIV_DATA 
		RES_M_DATA 
		AUX_W 
		AUX_VALOR_W 
		AUX_W_2 
		ANO1 
		AUX_B 
		RES_M_B
		
		
		

		;COLOQUE AQUI SUAS NOVAS VARIÁVEIS
		;NÃO ESQUEÇA COMENTÁRIOS ESCLARECEDORES

	ENDC			;FIM DO BLOCO DE DEFINIÇÃO DE VARIÁVEIS

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                        FLAGS INTERNOS                           *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODOS OS FLAGS UTILIZADOS PELO SISTEMA

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         CONSTANTES                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODAS AS CONSTANTES UTILIZADAS PELO SISTEMA

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                           ENTRADAS                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODOS OS PINOS QUE SERÃO UTILIZADOS COMO ENTRADA
; RECOMENDAMOS TAMBÉM COMENTAR O SIGNIFICADO DE SEUS ESTADOS (0 E 1)

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                           SAÍDAS                                *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODOS OS PINOS QUE SERÃO UTILIZADOS COMO SAÍDA
; RECOMENDAMOS TAMBÉM COMENTAR O SIGNIFICADO DE SEUS ESTADOS (0 E 1)

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       VETOR DE RESET                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	ORG	0x00			;ENDEREÇO INICIAL DE PROCESSAMENTO
	GOTO	INICIO
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    INÍCIO DA INTERRUPÇÃO                        *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; ENDEREÇO DE DESVIO DAS INTERRUPÇÕES. A PRIMEIRA TAREFA É SALVAR OS
; VALORES DE "W" E "STATUS" PARA RECUPERAÇÃO FUTURA

	ORG	0x04			;ENDEREÇO INICIAL DA INTERRUPÇÃO
	MOVWF	W_TEMP		;COPIA W PARA W_TEMP
	SWAPF	STATUS,W
	MOVWF	STATUS_TEMP	;COPIA STATUS PARA STATUS_TEMP

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    ROTINA DE INTERRUPÇÃO                        *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; AQUI SERÃO ESCRITAS AS ROTINAS DE RECONHECIMENTO E TRATAMENTO DAS
; INTERRUPÇÕES

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                 ROTINA DE SAÍDA DA INTERRUPÇÃO                  *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; OS VALORES DE "W" E "STATUS" DEVEM SER RECUPERADOS ANTES DE 
; RETORNAR DA INTERRUPÇÃO

SAI_INT
	SWAPF	STATUS_TEMP,W
	MOVWF	STATUS		;MOVE STATUS_TEMP PARA STATUS
	SWAPF	W_TEMP,F
	SWAPF	W_TEMP,W	;MOVE W_TEMP PARA W
	RETFIE

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*	            	 ROTINAS E SUBROTINAS                      *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; CADA ROTINA OU SUBROTINA DEVE POSSUIR A DESCRIÇÃO DE FUNCIONAMENTO
; E UM NOME COERENTE ÀS SUAS FUNÇÕES.
	
;-------------------------------------------------------------------------------
;PARA ESSE PROJETO, O ANO BISSEXTO É DETERMINADO APENAS CASO O RESTO DA DIVISÃO 
;DO ANO POR QUATRO SEJA IGUAL A ZERO. COMO A LINGUAGEM UTILIZADO NÃO POSSUI 
;OPERADOR PARA RESTO DE DIVISÃO, ENTÃO É EXECUTADO O SEGUINTE CALCULO:
;R = AA - (4 - (AA/4))
;-------------------------------------------------------------------------------	
TESTE_BISSEXTO

;AUX_B = ANO/4
DIVISAO_B
	MOVF AA, W
	MOVWF ANO ;UTILIZA-SE ESSA VARIAVEL PARA NÃO PERDERMOS O VALOR AA
	MOVLW .4  ;DEFINE QUANTAS SUBSTRAÇÕES IRÁ OCORRER
LOOP_DB	
	SUBWF ANO  ;ANO = ANO - W
	BTFSS STATUS, C  ;TESTA SE HOUVE CARRY-OUT E PULA SE NÃO OCORREU.
	GOTO MULTI_B ;OCORREU CARRY-OUT
	INCF AUX_B ; INCREMENTA AUX_B QUE GUARDA O VALOR INTEIRO DA DIVISAO 
	GOTO LOOP_DB 

;RES_M_B = 4*AUX_B
MULTI_B
	MOVLW .4  
	MOVWF M ;DEFINE QUANTAS MULTIFICAÇÕES IRÁ OCORRER
LOOP_MB
	BTFSC STATUS, Z ;TESTA SE O RESULTADO DA OPERAÇÃO É IGUAL A ZERO
	GOTO RESTO_B_4 ;O VALOR DE M CHEGOU EM ZERO
	MOVF AUX_B, W 
	ADDWF RES_M_B ;RES_M_B += AUX_B
	DECF M ;DECREMENTA M
	GOTO LOOP_MB
	
;R = AA - RES_M_B
RESTO_B_4
	MOVF RES_M_B, W
	SUBWF AA, W ; AA = AA - W
	MOVWF R 
	RETURN 
	
;-------------------------------------------------------------------------------
;AQUI É ESTABELECIDO O DIA DA SEMANA: RESTO = SOMA % 7
;SOMA = DIA + COD_MES + COD_ANO
;SE O ANO INICIAR COM 20, RETIRA 1
;-------------------------------------------------------------------------------

;AUX_W = DD + C_MES
DIA_DA_SEMANA
	MOVF DD, W
	ADDWF AUX_W
	MOVF C_MES, W
	ADDWF AUX_W
	MOVLW .20 ;AQUI É PRECISO FAZER UMA COMPARAÇÃO
	SUBWF INICIO_ANO, W ;INICIO_ANO = INICIO_ANO - 20
	BTFSS STATUS, Z ;TESTA O BIT Z E PULA SE O RESULTADO ANTERIOR FOR ZERO
	GOTO INICIO_ANO_19 
	GOTO INICIO_ANO_20 ;DEU ZERO (LOGO O VALOR DIGITADO FOI 20(
	
;É ADICIONADO O C_ANO E AUX_W
INICIO_ANO_19
	MOVF C_ANO, W
	ADDWF AUX_W
	GOTO DIVISAO_DATA
	
;SUBTRAI 1 E DEPOIS ADICIONA EM AUX_W
INICIO_ANO_20
	MOVLW .1
	SUBWF C_ANO, W
	ADDWF AUX_W

;AUX_DIV_DATA = AUX_W_2/7
DIVISAO_DATA
	MOVF AUX_W, W
	MOVWF AUX_W_2 ;USA ESSA VARIAVEL PARA NÃO PERDERMOS O VALOR AUX_W
	MOVLW .7 
	MOVWF V_SETE
LOOP_DIV_DATA
	SUBWF AUX_W_2
	BTFSS STATUS, C  
	GOTO MULTI_DATA
	INCF AUX_DIV_DATA
	GOTO LOOP_DIV_DATA

;RES_M_DATA = AUX_DIV_DATA*7
MULTI_DATA
	BTFSC STATUS, Z ;TESTA O BIT Z E PULA ENQUANTO A OPERAÇÃO NÃO FOR ZERO
	GOTO RESTO_DIV_DATA ;SE A OPERAÇÃO ANTERIOR FOR ZERO O LOOP ACABA
	MOVF AUX_DIV_DATA, W 
	ADDWF RES_M_DATA ;RES_M_DATA += AUX_DIV_DATA
	DECF V_SETE ;DECREMENTA
	GOTO MULTI_DATA
	
;W_FINAL = AUX_W - RES_M_DATA
RESTO_DIV_DATA
	MOVF RES_M_DATA, W
	SUBWF AUX_W, W ; AUX_W = AUX_W - W
	BTFSC STATUS, Z
	MOVLW .7 ;CORREÇÃO PARA O SABADO SER REPRESENTADO PELO VALOR 7
	MOVWF W_FINAL
	RETURN
;-------------------------------------------------------------------------------
;PARA O CÓDIGO DO ANO SÃO REALIZDAS DUAS OPERAÇÕES:
;1)DIVIDE O VALOR DE AA POR QUATRO E PEGA A PARTE INTEIRA (P_INTEIRA)
;2)DIVIDE O VALOR DE AA POR SETE E PEGA O RESTO DA DIVISAO(P_RESTO)
;LOGO O COD_ANO = P_INTEIRA + P_RESTO
;A PARTE INTEIRA (P_INTEIRA) REPRESENTA QUANTOS ANOS BISSEXTOS EXISTIRAM ATÉ 
;AQUELE MOMENTO (POR ISSO DIVIDE POR QUATRO)
;JÁ A PARTE DO RESTO (P_RESTO) É USADO PARA MODULAR (MOD 7) O VALOR GRANDE.
;-------------------------------------------------------------------------------
	
	
COD_ANO
	MOVF AA, W
	MOVWF AUX_ANO ;USA ESSA VARIAVEL PARA NÃO PERDERMOS O VALOR DE AA
	MOVLW .4

;P_INTEIRA = AUX_ANO/7
DIVISAO_4
	SUBWF AUX_ANO
	BTFSS STATUS, C ;TESTA SE HOUVE CARRY-OUT  
	GOTO DIVISAO_7 ;OCORREU CARRY-OUT
	INCF P_INTEIRA ;INCREMENTA ENQUANTO NÃO OCORREU
	GOTO DIVISAO_4
	
;AUX_DIV = AUX_ANO_2/7
DIVISAO_7
	MOVF AA, W
	MOVWF AUX_ANO_2  ;USA ESSA VARIAVEL PARA NÃO PERDERMOS O VALOR DE AA
	MOVLW .7
	MOVWF V_SETE
LOOP_DIV_7
	SUBWF AUX_ANO_2
	BTFSS STATUS, C  
	GOTO MULTI_ANO_7
	INCF AUX_DIV
	GOTO LOOP_DIV_7
	
;RES_M_ANO = AUX_DIV*7
MULTI_ANO_7
	BTFSC STATUS, Z
	GOTO RESTO_DIV_7
	MOVF AUX_DIV, W 
	ADDWF RES_M_ANO
	DECF V_SETE
	GOTO MULTI_ANO_7

;P_RESTO = AA - RES_M_ANO
RESTO_DIV_7
	MOVF RES_M_ANO, W
	SUBWF AA, W ; d = f - w
	MOVWF P_RESTO

;C_ANO = P_INTEIRO + P_RESTO
SOMA_ANO
	MOVF P_RESTO, W
	ADDWF C_ANO
	MOVF P_INTEIRA, W
	ADDWF C_ANO
	RETURN
	
;-------------------------------------------------------------------------------
;PARA IDENTIFICAR EM QUE MÊS ESTAMOS É SOMADO TODOS OS DIAS DO ANO ATÉ A CHEGADA
;DESSA MÊS. COMO ESTAMOS USANDO O MOD 7, É EXTRAÍDO O RESTO DA DIVISÃO.
;A LÓGICA SE APLICA PARA TODOS OS MESES
;-------------------------------------------------------------------------------
	
;REBECE O VALOR DO MÊS E DIRECIONA PARA LABEL ADEQUADA
COD_MES
	MOVLW .7
	MOVWF SETE
	;CODIFICAÇÃO DOS MESES
	MOVLW .1
	SUBWF MM, W
	BTFSC STATUS, Z
	GOTO JANEIRO
	MOVLW .2
	SUBWF MM, W
	BTFSC STATUS, Z 
	GOTO FEVEREIRO
	MOVLW .3
	SUBWF MM, W
	BTFSC STATUS, Z
	GOTO MARCO
	MOVLW .4
	SUBWF MM, W
	BTFSC STATUS, Z 
	GOTO ABRIL
	MOVLW .5
	SUBWF MM, W
	BTFSC STATUS, Z
	GOTO MAIO
	MOVLW .6
	SUBWF MM, W
	BTFSC STATUS, Z 
	GOTO JUNHO
	MOVLW .7
	SUBWF MM, W
	BTFSC STATUS, Z
	GOTO JULHO
	MOVLW .8
	SUBWF MM, W
	BTFSC STATUS, Z 
	GOTO AGOSTO
	MOVLW .9
	SUBWF MM, W
	BTFSC STATUS, Z
	GOTO SETEMBRO
	MOVLW .10
	SUBWF MM, W
	BTFSC STATUS, Z 
	GOTO OUTUBRO
	MOVLW .11
	SUBWF MM, W
	BTFSC STATUS, Z
	GOTO NOVEMBRO
	MOVLW .12
	SUBWF MM, W
	BTFSC STATUS, Z 
	GOTO DEZEMBRO
	GOTO FIM
	
;PARA JANEIRO TEMOS DOIS CASOS: SE O ANO FOR BISSEXTO, O MÊS COMEÇA COM ZERO
;CASO NÃO SEJA BISSEXTO, COMEÇA COM 1.
	
JANEIRO
	MOVLW .0
	SUBWF R, W
	BTFSS STATUS, Z
	GOTO INICIA_EM_1
	GOTO INICIA_EM_0
	
INICIA_EM_1
	MOVLW .1
	MOVWF C_MES
	RETURN
INICIA_EM_0
	MOVLW .0
	MOVWF C_MES
	RETURN

;PARA FEVEREIRO TAMBÉM HÁ DOIS CASOS: SE O ANO FOR BISSEXTO, SUBTRAI 1 DO CÓDIGO
;DO MÊS E CASO NÃO SEJA BISSEXTO, NÃO FAZ NADA.
FEVEREIRO
	MOVLW .32 ; 1+31
	MOVWF SOMA_MES
	MOVWF AUX ; É UTILIZADO PARA NAO PERDER O VALOR DE SOMA_MES
	MOVF SETE, W

;AUX_MES = AUX/7
DIVISAO_FEV
	SUBWF AUX
	BTFSS STATUS, C  
	GOTO MULTI_FEV
	INCF AUX_MES
	GOTO DIVISAO_FEV
	
;RES_M = AUX_MES*7 
MULTI_FEV
	BTFSC STATUS, Z
	GOTO RESTO_DIV_FEV
	MOVF AUX_MES, W 
	ADDWF RES_M
	DECF SETE
	GOTO MULTI_FEV
	
;C_MES = SOMA_MES - RES_M
RESTO_DIV_FEV
	MOVLW .0
	SUBWF R, W
	BTFSS STATUS, Z
	RETURN
	GOTO SUB_1
	MOVF RES_M, W
	SUBWF SOMA_MES, W ; SOMA_MES = SOMA_MES - W
	MOVWF C_MES
	

SUB_1
	MOVLW .1
	SUBWF C_MES, F
	RETURN
	
MARCO
	MOVLW .60 ; 1 + 31 + 28
	ADDWF SOMA_MES
	MOVF SOMA_MES, W
	MOVWF AUX ;  É UTILIZADO PARA NAO PERDER O VALOR DE SOMA_MES
	MOVF SETE, W

;AUX_MES = AUX/7	
DIVISAO_MAR
	SUBWF AUX
	BTFSS STATUS, C  
	GOTO MULTI_MAR
	INCF AUX_MES
	GOTO DIVISAO_MAR
	
;RES_M = AUX_MES*7
MULTI_MAR
	BTFSC STATUS, Z
	GOTO RESTO_DIV_MAR
	MOVF AUX_MES, W 
	ADDWF RES_M
	DECF SETE
	GOTO MULTI_MAR

;C_MES = SOMA_MES - RES_M
RESTO_DIV_MAR
	MOVF RES_M, W
	SUBWF SOMA_MES, W ; d = f - w
	MOVWF C_MES
	RETURN
	
ABRIL
	MOVLW .91 ; 1+31+28+31
	ADDWF SOMA_MES
	MOVF SOMA_MES, W
	MOVWF AUX ; GUARDA O VALOR DE SOMA_MES. É UTILIZADO PARA NAO PERDER O VALOR DE SOMA_MES
	MOVF SETE, W

;AUX_MES = AUX/7
DIVISAO_ABR
	SUBWF AUX
	BTFSS STATUS, C  
	GOTO MULTI_ABR
	INCF AUX_MES
	GOTO DIVISAO_ABR

;RES_M = AUX_MES*7
MULTI_ABR
	BTFSC STATUS, Z
	GOTO RESTO_DIV_ABR
	MOVF AUX_MES, W 
	ADDWF RES_M
	DECF SETE
	GOTO MULTI_ABR

;C_MES = SOMA_MES - RES_M
RESTO_DIV_ABR
	MOVF RES_M, W
	SUBWF SOMA_MES, W ; d = f - w
	MOVWF C_MES
	RETURN
	
MAIO
	MOVLW .121 ; 1+31+28+31+30
	ADDWF SOMA_MES
	MOVF SOMA_MES, W
	MOVWF AUX ; GUARDA O VALOR DE SOMA_MES. É UTILIZADO PARA NAO PERDER O VALOR DE SOMA_MES
	MOVF SETE, W
	
;AUX_MES = AUX/7	
DIVISAO_MAI
	SUBWF AUX
	BTFSS STATUS, C  
	GOTO MULTI_MAI
	INCF AUX_MES
	GOTO DIVISAO_MAI

;RES_M = AUX_MES*7
MULTI_MAI
	BTFSC STATUS, Z
	GOTO RESTO_DIV_MAI
	MOVF AUX_MES, W 
	ADDWF RES_M
	DECF SETE
	GOTO MULTI_MAI
	
;C_MES = SOMA_MES - RES_M	
RESTO_DIV_MAI
	MOVF RES_M, W
	SUBWF SOMA_MES, W ; d = f - w
	MOVWF C_MES
	RETURN
	
JUNHO
	MOVLW .152 ; 1+31+28+31+30+31
	ADDWF SOMA_MES
	MOVF SOMA_MES, W
	MOVWF AUX ; GUARDA O VALOR DE SOMA_MES. É UTILIZADO PARA NAO PERDER O VALOR DE SOMA_MES
	MOVF SETE, W

;AUX_MES = AUX/7
DIVISAO_JUN
	SUBWF AUX
	BTFSS STATUS, C  
	GOTO MULTI_JUN
	INCF AUX_MES
	GOTO DIVISAO_JUN

;RES_M = AUX_MES*7
MULTI_JUN
	BTFSC STATUS, Z
	GOTO RESTO_DIV_JUN
	MOVF AUX_MES, W 
	ADDWF RES_M
	DECF SETE
	GOTO MULTI_JUN

;C_MES = SOMA_MES - RES_M
RESTO_DIV_JUN
	MOVF RES_M, W
	SUBWF SOMA_MES, W ; d = f - w
	MOVWF C_MES
	RETURN

JULHO
	MOVLW .182 ; 1+31+28+31+30+31+30
	ADDWF SOMA_MES
	MOVF SOMA_MES, W
	MOVWF AUX ; GUARDA O VALOR DE SOMA_MES. É UTILIZADO PARA NAO PERDER O VALOR DE SOMA_MES
	MOVF SETE, W
	
;AUX_MES = AUX/7	
DIVISAO_JUL
	SUBWF AUX
	BTFSS STATUS, C  
	GOTO MULTI_JUL
	INCF AUX_MES
	GOTO DIVISAO_JUL

;RES_M = AUX_MES*7
MULTI_JUL
	BTFSC STATUS, Z
	GOTO RESTO_DIV_JUL
	MOVF AUX_MES, W 
	ADDWF RES_M
	DECF SETE
	GOTO MULTI_JUL
	
;C_MES = SOMA_MES - RES_M	
RESTO_DIV_JUL
	MOVF RES_M, W
	SUBWF SOMA_MES, W ; d = f - w
	MOVWF C_MES
	RETURN
AGOSTO
	MOVLW .213 ; 1+31+28+31+30+31+30+31
	ADDWF SOMA_MES
	MOVF SOMA_MES, W
	MOVWF AUX ; GUARDA O VALOR DE SOMA_MES. É UTILIZADO PARA NAO PERDER O VALOR DE SOMA_MES
	MOVF SETE, W

;AUX_MES = AUX/7
DIVISAO_AGO
	SUBWF AUX
	BTFSS STATUS, C  
	GOTO MULTI_AGO
	INCF AUX_MES
	GOTO DIVISAO_AGO
	
;RES_M = AUX_MES*7
MULTI_AGO
	BTFSC STATUS, Z
	GOTO RESTO_DIV_AGO
	MOVF AUX_MES, W 
	ADDWF RES_M
	DECF SETE
	GOTO MULTI_AGO

;C_MES = SOMA_MES - RES_M
RESTO_DIV_AGO
	MOVF RES_M, W
	SUBWF SOMA_MES, W ; d = f - w
	MOVWF C_MES
	RETURN
	
SETEMBRO
	MOVLW .244 ; 1+31+28+31+30+31+30+31+31
	ADDWF SOMA_MES
	MOVF SOMA_MES, W
	MOVWF AUX ; GUARDA O VALOR DE SOMA_MES. É UTILIZADO PARA NAO PERDER O VALOR DE SOMA_MES
	MOVF SETE, W

;AUX_MES = AUX/7
DIVISAO_SET
	SUBWF AUX
	BTFSS STATUS, C  
	GOTO MULTI_SET
	INCF AUX_MES
	GOTO DIVISAO_SET
	
;RES_M = AUX_MES*7
MULTI_SET
	BTFSC STATUS, Z
	GOTO RESTO_DIV_SET
	MOVF AUX_MES, W 
	ADDWF RES_M
	DECF SETE
	GOTO MULTI_SET

;C_MES = SOMA_MES - RES_M	
RESTO_DIV_SET
	MOVF RES_M, W
	SUBWF SOMA_MES, W ; d = f - w
	MOVWF C_MES
	RETURN
	
;A PARTIR DESSE MÊS O SOMATÓRIO EXECE 8 BITS E SE TORNA INVIÁVEL FAZER TODAS 
;AS OPERAÇÕES GUARDANDO UM VALOR DE 16 BITS EM DUAS VARIÁVEIS. ASSIM, AS
;OPERAÇÕES PARA OS ULTIMOS TRÊS MESES ESTÃO IMPLICITAS. 
	
OUTUBRO
	MOVLW .1
	MOVWF C_MES
	RETURN
	
NOVEMBRO
	MOVLW .4
	MOVWF C_MES
	RETURN
DEZEMBRO
	MOVLW .6
	MOVWF C_MES
	RETURN
		
FIM
	RETURN

;-------------------------------------------------------------------------------

	
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     INICIO DO PROGRAMA                          *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	
INICIO
	BANK1				;ALTERA PARA O BANCO 1
	MOVLW	B'00000000' ;CONFIGURA TODAS AS PORTAS DO GPIO (PINOS)
	MOVWF	TRISIO		;COMO SAÍDAS
	CLRF	ANSEL 		;DEFINE PORTAS COMO Digital I/O
	MOVLW	B'00000100'
	MOVWF	OPTION_REG	;DEFINE OPÇÕES DE OPERAÇÃO
	MOVLW	B'00000000'
	MOVWF	INTCON		;DEFINE OPÇÕES DE INTERRUPÇÕES
	BANK0				;RETORNA PARA O BANCO
	MOVLW	B'00000111'
	MOVWF	CMCON		;DEFINE O MODO DE OPERAÇÃO DO COMPARADOR ANALÓGICO

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     INICIALIZAÇÃO DAS VARIÁVEIS                 *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     ROTINA PRINCIPAL                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
MAIN

;DEFINIÇÃO DAS VARIAVEIS. A DATA É DEFINADA POR DD/MM/INICIO_ANO:AA
	
	MOVLW .21
	MOVWF DD ;DIA
	MOVLW .6
	MOVWF MM ;MÊS
	MOVLW .20
	MOVWF INICIO_ANO ;PRIMEIROS DOIS DIGITOS DO ANO (19 OU 20) 
	MOVLW .18
	MOVWF AA ; ULTIMOS DOIS DIGITOS DO ANO (21 > AA > 30) 

;-------------------------------------------------------------------------------
;O CÓDIGO ABAIXO FAZ A FUNÇÃO DE CONDICIONAIS QUE TESTAM SE O VALOR DO ANO 
;INSERIDO ESTÁ ENTRE 1930 E 2021. FOI DEFINIDO O VALOR 31 E 22, POIS A LÓGICA 
;CRIADA SE BASEIA NOS OPERADORES MENOR E MAIOR (NÃO MENOR/IGUAL E MAIOR/IGUAL).
;A FAIXA ENTRE 22 E 29 ESTÁ FORA DE ESCOPO.
;-------------------------------------------------------------------------------
	MOVLW .31 ;
	SUBWF AA, W ; W = F - W 
	BTFSS STATUS, C ;TESTA O BIT C
	GOTO MENOR_21  ;VALOR NEGATIVO (MENOR QUE 30)  
	GOTO PRINCIPAL ;VALOR POSITIVO (MAIOR QUE 30)

MENOR_21 
	MOVLW .22
	SUBWF AA, W
	BTFSS STATUS, C
	GOTO PRINCIPAL ;VALOR NEGATIVO (MENOR QUE 21) 
	GOTO ERRO ;VALOR POSITIVO (MAIOR QUE 21) 
	          ;(SE CHEGOU AQUI, O VALOR É MENOR 30, MAIOR 21) 

;O ALGORITMO SE BASEIA NO SEGUINTE CALCULO: SOMA = DIA + COD_MES + COD_ANO.
;APÓS ISSO, É EXTRAIDO O RESTO DA DIVISAO POR 7 DA VARIAVEL "SOMA". O RESULTADO 
;DEFINE O VALOR DE W. O VALOR DO DIA DA SEMANA (BASEADO NA ESPECIFICAÇÃO DO
;PROJETO) SERÁ ARMAZENADO NO REGISTRADOR WREG E EM W_FINAL (POR PRECAUÇÃO).
;A CRIAÇÃO DAS SUBROTINAS VISARAM FACILITAR O ENTEDIMENTO E EXECUÇÃO DO CÓDIGO.
	
PRINCIPAL
	CALL TESTE_BISSEXTO ; FUNÇÃO DE TESTE PARA SABER SE O ANO É BISSEXTO
	CALL COD_MES ;FUNÇÃO PARA DEFINIR O CÓDIGO DO MÊS
	CALL COD_ANO ;FUNÇÃO PARA DEFINIR O CÓDIGO DO ANO
	CALL DIA_DA_SEMANA ;FUNÇÃO PARA DEFINIR O VALOR FINAL DE W
	GOTO MAIN
ERRO
	CLRW ;CASO O VALOR DE AA ESTEJA FORA DA REGIÃO DEFINIDA, 
	     ;O REGISTRADOR WREG É LIMPO (VALOR 0).
	

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       FIM DO PROGRAMA                           *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	END
